package fr.an.eclipse.pattern.ast.utils;

import com.thoughtworks.xstream.XStream;

import fr.an.eclipse.pattern.ast.impl.StdAlgebraPatterns.GroupCapturePattern;
import fr.an.eclipse.pattern.ast.impl.StdAlgebraPatterns.MatchAllOfPattern;
import fr.an.eclipse.pattern.ast.impl.StdAlgebraPatterns.MatchAndPattern;
import fr.an.eclipse.pattern.ast.impl.StdAlgebraPatterns.MatchNotPattern;
import fr.an.eclipse.pattern.ast.impl.StdAlgebraPatterns.MatchOneOfPattern;
import fr.an.eclipse.pattern.ast.impl.StdAlgebraPatterns.MatchOrPattern;
import fr.an.eclipse.pattern.ast.impl.StdAlgebraPatterns.WildcardContainingPattern;
import fr.an.eclipse.pattern.ast.impl.StdAlgebraPatterns.WildcardPattern;
import fr.an.eclipse.pattern.ast.impl.StdBasePatterns.DefaultBooleanPattern;
import fr.an.eclipse.pattern.ast.impl.StdBasePatterns.DefaultIntegerPattern;
import fr.an.eclipse.pattern.ast.impl.StdBasePatterns.DefaultStringPattern;
import fr.an.eclipse.pattern.ast.impl.StdBasePatterns.RegexpStringPattern;
import fr.an.eclipse.pattern.ast.impl.StdCommentPatterns.CommentPattern;
import fr.an.eclipse.pattern.ast.impl.StdCommentPatterns.DocElementPattern;
import fr.an.eclipse.pattern.ast.impl.StdCommentPatterns.JavadocPattern;
import fr.an.eclipse.pattern.ast.impl.StdCommentPatterns.LineCommentPattern;
import fr.an.eclipse.pattern.ast.impl.StdCommentPatterns.MemberRefPattern;
import fr.an.eclipse.pattern.ast.impl.StdCommentPatterns.MethodRefParameterPattern;
import fr.an.eclipse.pattern.ast.impl.StdCommentPatterns.MethodRefPattern;
import fr.an.eclipse.pattern.ast.impl.StdCommentPatterns.TagElementPattern;
import fr.an.eclipse.pattern.ast.impl.StdCommentPatterns.TextElementPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.AbstractTypeDeclarationPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.AnnotationTypeDeclarationPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.AnnotationTypeMemberDeclarationPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.AnonymousClassDeclarationPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.BodyDeclarationPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.CompilationUnitPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.EnumConstantDeclarationPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.EnumDeclarationPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.ExtendedModifierPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.FieldDeclarationPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.ImportDeclarationPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.InitializerPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.MarkerAnnotationPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.MethodDeclarationPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.ModifierFlagsPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.ModifierPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.PackageDeclarationPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.SingleVariableDeclarationPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.TypeDeclarationPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.VariableDeclarationFragmentPattern;
import fr.an.eclipse.pattern.ast.impl.StdDeclarationASTPatterns.VariableDeclarationPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.AnnotationPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.ArrayAccessPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.ArrayCreationPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.ArrayInitializerPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.AssignmentOperatorPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.AssignmentPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.BooleanLiteralPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.CastExpressionPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.CharacterLiteralPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.ClassInstanceCreationPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.ConditionalExpressionPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.ExpressionPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.FieldAccessPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.InfixExpressionOperatorPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.InfixExpressionPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.InstanceofExpressionPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.MemberValuePairPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.MethodInvocationPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.NamePattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.NormalAnnotationPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.NullLiteralPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.NumberLiteralPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.ParenthesizedExpressionPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.PostfixExpressionOperatorPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.PostfixExpressionPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.PrefixExpressionOperatorPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.PrefixExpressionPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.QualifiedNamePattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.SimpleNamePattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.SingleMemberAnnotationPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.StringLiteralPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.SuperFieldAccessPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.SuperMethodInvocationPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.ThisExpressionPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.TypeLiteralPattern;
import fr.an.eclipse.pattern.ast.impl.StdExpressionASTPatterns.VariableDeclarationExpressionPattern;
import fr.an.eclipse.pattern.ast.impl.StdListPatterns.DefaultASTListPattern;
import fr.an.eclipse.pattern.ast.impl.StdListPatterns.MatchAllEltsOfListPattern;
import fr.an.eclipse.pattern.ast.impl.StdListPatterns.MatchOneEltOfListPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.AssertStatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.BlockPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.BreakStatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.CatchClausePattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.ConstructorInvocationPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.ContinueStatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.DoStatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.EmptyStatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.EnhancedForStatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.ExpressionStatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.ForStatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.IfStatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.LabeledStatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.ReturnStatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.StatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.SuperConstructorInvocationPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.SwitchCasePattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.SwitchStatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.SynchronizedStatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.ThrowStatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.TryStatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.TypeDeclarationStatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.VariableDeclarationStatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdStatementASTPatterns.WhileStatementPattern;
import fr.an.eclipse.pattern.ast.impl.StdTypesASTPatterns.ArrayTypePattern;
import fr.an.eclipse.pattern.ast.impl.StdTypesASTPatterns.ParameterizedTypePattern;
import fr.an.eclipse.pattern.ast.impl.StdTypesASTPatterns.PrimitiveTypePattern;
import fr.an.eclipse.pattern.ast.impl.StdTypesASTPatterns.QualifiedTypePattern;
import fr.an.eclipse.pattern.ast.impl.StdTypesASTPatterns.SimpleTypePattern;
import fr.an.eclipse.pattern.ast.impl.StdTypesASTPatterns.TypeParameterPattern;
import fr.an.eclipse.pattern.ast.impl.StdTypesASTPatterns.TypePattern;
import fr.an.eclipse.pattern.ast.impl.StdTypesASTPatterns.UnionTypePattern;
import fr.an.eclipse.pattern.ast.impl.StdTypesASTPatterns.WildcardTypePattern;

public class PatternXStreamUtils {

	public static XStream snewXStream() {
		XStream res = new XStream();
		registerAlias(res);
		return res;
	}

	public static void registerAlias(XStream res) {
		res.alias("GroupP", GroupCapturePattern.class);
		res.alias("WildcardP", WildcardPattern.class);  
		res.alias("WildcardContainingP", WildcardContainingPattern.class);
		
		//  basic algebra pattern
		res.alias("NotP", MatchNotPattern.class);
		res.alias("AndP", MatchAndPattern.class);
		res.alias("OrP", MatchOrPattern.class);
		res.alias("AllOfP", MatchAllOfPattern.class);
		res.alias("OneOfP", MatchOneOfPattern.class);
		
		// Basic primitive values patterns
		res.alias("BooleanP", DefaultBooleanPattern.class);
		res.alias("IntegerP", DefaultIntegerPattern.class);
		res.alias("StringP", DefaultStringPattern.class);
		res.alias("RegexpStringP", RegexpStringPattern.class);

		// List patterns
		res.alias("DefaultListP", DefaultASTListPattern.class);
		res.alias("MatchAllEltsOfListP", MatchAllEltsOfListPattern.class);
		res.alias("MatchOneEltOfListP", MatchOneEltOfListPattern.class);
		
		// AST patterns
		// ------------------------------------------------------------------------
		
		res.alias("QualifiedTypeP", QualifiedTypePattern.class);
		res.alias("ModifierFlagsP", ModifierFlagsPattern.class);
		res.alias("ExpressionStmtP", ExpressionStatementPattern.class);
		res.alias("PackageDeclP", PackageDeclarationPattern.class);
		res.alias("StmtP", StatementPattern.class);
		res.alias("DoStmtP", DoStatementPattern.class);
		res.alias("CatchClauseP", CatchClausePattern.class);
		res.alias("ImportDeclP", ImportDeclarationPattern.class);
		res.alias("ArrayCreationP", ArrayCreationPattern.class);
		res.alias("EnumDeclP", EnumDeclarationPattern.class);
		res.alias("MemberRefP", MemberRefPattern.class);
		res.alias("MethodRefP", MethodRefPattern.class);
		res.alias("ExtendedModifierP", ExtendedModifierPattern.class);
		res.alias("ConstructorInvocationP", ConstructorInvocationPattern.class);
		res.alias("TagElementP", TagElementPattern.class);
		res.alias("ClassInstanceCreationP", ClassInstanceCreationPattern.class);
		res.alias("TypeParameterP", TypeParameterPattern.class);
		res.alias("AnnotationP", AnnotationPattern.class);
		res.alias("MethodRefParameterP", MethodRefParameterPattern.class);
		res.alias("ArrayInitializerP", ArrayInitializerPattern.class);
		res.alias("SimpleTypeP", SimpleTypePattern.class);
		res.alias("BlockP", BlockPattern.class);
		res.alias("LabeledStmtP", LabeledStatementPattern.class);
		res.alias("InitializerP", InitializerPattern.class);
		res.alias("VariableDeclarationExprP", VariableDeclarationExpressionPattern.class);
		res.alias("TextElementP", TextElementPattern.class);
		res.alias("VariableDeclarationStmtP", VariableDeclarationStatementPattern.class);
		res.alias("SingleMemberAnnotationP", SingleMemberAnnotationPattern.class);
		res.alias("BodyDeclP", BodyDeclarationPattern.class);
		res.alias("EnhancedForStmtP", EnhancedForStatementPattern.class);
		res.alias("NormalAnnotationP", NormalAnnotationPattern.class);
		res.alias("ModifierP", ModifierPattern.class);
		res.alias("TypeLiteralP", TypeLiteralPattern.class);
		res.alias("ExprP", ExpressionPattern.class);
		res.alias("WildcardTypeP", WildcardTypePattern.class);
		res.alias("IfStmtP", IfStatementPattern.class);
		res.alias("ThisExprP", ThisExpressionPattern.class);
		res.alias("InfixExprP", InfixExpressionPattern.class);
		res.alias("ThrowStmtP", ThrowStatementPattern.class);
		res.alias("ForStmtP", ForStatementPattern.class);
		res.alias("QualifiedNameP", QualifiedNamePattern.class);
		res.alias("ParenthesizedExprP", ParenthesizedExpressionPattern.class);
		res.alias("TypeP", TypePattern.class);
		res.alias("ParameterizedTypeP", ParameterizedTypePattern.class);
		res.alias("AssignmentOperatorP", AssignmentOperatorPattern.class);
		res.alias("BooleanLiteralP", BooleanLiteralPattern.class);
		res.alias("PrefixExpressionOperatorP", PrefixExpressionOperatorPattern.class);
		res.alias("FieldAccessP", FieldAccessPattern.class);
		res.alias("LineCommentP", LineCommentPattern.class);
		res.alias("TypeDeclarationStmtP", TypeDeclarationStatementPattern.class);
		res.alias("ConditionalExprP", ConditionalExpressionPattern.class);
		res.alias("SingleVariableDeclP", SingleVariableDeclarationPattern.class);
		res.alias("CommentP", CommentPattern.class);
		res.alias("AnonymousClassDeclP", AnonymousClassDeclarationPattern.class);
		res.alias("AssertStmtP", AssertStatementPattern.class);
		res.alias("EnumConstantDeclP", EnumConstantDeclarationPattern.class);
		res.alias("SimpleNameP", SimpleNamePattern.class);
		res.alias("UnionTypeP", UnionTypePattern.class);
		res.alias("SuperFieldAccessP", SuperFieldAccessPattern.class);
		res.alias("CastExprP", CastExpressionPattern.class);
		res.alias("FieldDeclP", FieldDeclarationPattern.class);
		res.alias("SuperMethodInvocationP", SuperMethodInvocationPattern.class);
		res.alias("EmptyStmtP", EmptyStatementPattern.class);
		res.alias("MethodInvocationP", MethodInvocationPattern.class);
		res.alias("SynchronizedStmtP", SynchronizedStatementPattern.class);
		res.alias("JavadocP", JavadocPattern.class);
		res.alias("AssignmentP", AssignmentPattern.class);
		res.alias("TypeDeclP", TypeDeclarationPattern.class);
		res.alias("SwitchStmtP", SwitchStatementPattern.class);
		res.alias("PrimitiveTypeP", PrimitiveTypePattern.class);
		res.alias("CharacterLiteralP", CharacterLiteralPattern.class);
		res.alias("MethodDeclP", MethodDeclarationPattern.class);
		res.alias("SwitchCaseP", SwitchCasePattern.class);
		res.alias("InfixExpressionOperatorP", InfixExpressionOperatorPattern.class);
		res.alias("StringLiteralP", StringLiteralPattern.class);
		res.alias("NumberLiteralP", NumberLiteralPattern.class);
		res.alias("ReturnStmtP", ReturnStatementPattern.class);
		res.alias("VariableDeclP", VariableDeclarationPattern.class);
		res.alias("WhileStmtP", WhileStatementPattern.class);
		res.alias("VariableDeclarationFragmentP", VariableDeclarationFragmentPattern.class);
		res.alias("AnnotationTypeMemberDeclP", AnnotationTypeMemberDeclarationPattern.class);
		res.alias("PostfixExprP", PostfixExpressionPattern.class);
		res.alias("NameP", NamePattern.class);
		res.alias("MemberValuePairP", MemberValuePairPattern.class);
		res.alias("TypeP", TypePattern.class);
		res.alias("ArrayTypeP", ArrayTypePattern.class);
		res.alias("ContinueStmtP", ContinueStatementPattern.class);
		res.alias("MarkerAnnotationP", MarkerAnnotationPattern.class);
		res.alias("SuperConstructorInvocationP", SuperConstructorInvocationPattern.class);
		res.alias("NullLiteralP", NullLiteralPattern.class);
		res.alias("DocElementP", DocElementPattern.class);
		res.alias("ArrayAccessP", ArrayAccessPattern.class);
		res.alias("AbstractTypeDeclP", AbstractTypeDeclarationPattern.class);
		res.alias("PostfixExpressionOperatorP", PostfixExpressionOperatorPattern.class);
		res.alias("InstanceofExprP", InstanceofExpressionPattern.class);
		res.alias("TryStmtP", TryStatementPattern.class);
		res.alias("BreakStmtP", BreakStatementPattern.class);
		res.alias("CompilationUnitP", CompilationUnitPattern.class);
		res.alias("PrefixExprP", PrefixExpressionPattern.class);
		res.alias("AnnotationTypeDeclP", AnnotationTypeDeclarationPattern.class);
	}
}
